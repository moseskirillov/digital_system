package org.wolrus.digital_system.scheduler;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.wolrus.digital_system.entity.GroupEntity;
import org.wolrus.digital_system.entity.GroupLeaderEntity;
import org.wolrus.digital_system.entity.RegionalLeaderEntity;
import org.wolrus.digital_system.entity.UnfilledReportEntity;
import org.wolrus.digital_system.entity.UserEntity;
import org.wolrus.digital_system.feign.UrlShorterClient;
import org.wolrus.digital_system.model.LeaderInfo;
import org.wolrus.digital_system.model.NotCompletedGroup;
import org.wolrus.digital_system.repository.GroupLeaderRepository;
import org.wolrus.digital_system.repository.GroupRepository;
import org.wolrus.digital_system.repository.RegionalLeaderRepository;
import org.wolrus.digital_system.repository.ReportRepository;
import org.wolrus.digital_system.repository.UnfilledReportRepository;
import org.wolrus.digital_system.service.NotificationService;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;

@Slf4j
@Component
@RequiredArgsConstructor
public class GroupsReportsScheduler {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    private static final String HOME_GROUP_TYPE = "–í–∑—Ä–æ—Å–ª—ã–µ";
    private static final Locale LOCALE = Locale.of("ru", "RU");
    private static final String REPEATED_REPORT_MESSAGE = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ %s. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ: %s";
    private static final String REPORT_MESSAGE = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, —Å–µ–≥–æ–¥–Ω—è, %s —É –≤–∞—Å –ø—Ä–æ—à–ª–∞ –¥–æ–º–∞—à–Ω—è—è –≥—Ä—É–ø–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ: %s. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–ª—É–∂–µ–Ω–∏–µ, –ø—É—Å—Ç—å –ë–æ–≥ –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –≤–∞—Å";

    @Value("${yandex.form.url}")
    private String YANDEX_FORM_URL;

    @Value("${telegram.pastor-id}")
    private String PASTOR_TELEGRAM_ID;

    @Value("${telegram.groups-admin-id}")
    private String GROUPS_ADMIN_TELEGRAM_ID;

    @Value("${data.region-leader-for-ignore.adult}")
    private Integer REGION_LEADER_ID_FOR_IGNORE_ADULT;

    @Value("${data.region-leader-for-ignore.young}")
    private Integer REGION_LEADER_ID_FOR_IGNORE_YOUNG;

    private final GroupRepository groupRepository;
    private final ReportRepository reportRepository;
    private final UrlShorterClient urlShorterClient;
    private final NotificationService notificationService;
    private final GroupLeaderRepository groupLeaderRepository;
    private final UnfilledReportRepository unfilledReportRepository;
    private final RegionalLeaderRepository regionalLeaderRepository;

    @Scheduled(cron = "0 0 19 * * MON", zone = "Europe/Moscow")
    public void unfilledReportsNotifier() {
        log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö");
        var now = LocalDate.now().minusDays(2);
        var unfilledReports = unfilledReportRepository.findAllByReportDateLessThanEqual(now);
        if (unfilledReports.isEmpty()) {
            log.info("–ù–µ—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤");
            var ignoreIds = List.of(REGION_LEADER_ID_FOR_IGNORE_ADULT, REGION_LEADER_ID_FOR_IGNORE_YOUNG);
            var regionalLeaders = regionalLeaderRepository.findAllByIdNotIn(ignoreIds).stream()
                    .map(RegionalLeaderEntity::getUser)
                    .map(UserEntity::getTelegramId)
                    .map(String::valueOf)
                    .toList();
            sendMessageAboutNotUnfilledReports(regionalLeaders);
            return;
        }
        var leadersInfoMap = createLeadersInfoMap(unfilledReports);
        var message = createReportText(unfilledReports.size(), leadersInfoMap);
        notificationService.sendNotification(GROUPS_ADMIN_TELEGRAM_ID, message);
        notificationService.sendNotification(PASTOR_TELEGRAM_ID, message);
        for (var element : leadersInfoMap.entrySet()) {
            var sb = new StringBuilder();
            sb.append("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üòá\n");
            sb.append("–í –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ –µ—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –æ—Ç—á–µ—Ç—É –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏\n\n");
            var reportsList = leadersInfoMap.get(element.getKey());
            for (var report : reportsList) {
                sb.append(String.format("%s \n", report));
            }
            var telegramId = element.getKey().telegramId();
            notificationService.sendNotification(telegramId, sb.toString());
        }
        log.info("–°–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
    }

    @Scheduled(cron = "0 0 18 * * TUE", zone = "Europe/Moscow")
    public void reportsCountForMonthNotifier() {
        log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞");
        var openedGroups = groupRepository.countAllByIsOpenIsTrueAndAge(HOME_GROUP_TYPE);
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø –∑–∞ –º–µ—Å—è—Ü: {}", openedGroups);
        var completedGroupsByMonth = reportRepository.countAllCompletedGroupsByMonth();
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≥—Ä—É–ø–ø –∑–∞ –º–µ—Å—è—Ü: {}", completedGroupsByMonth);
        var notCompleted = reportRepository.countAllNotCompletedGroupsByMonth();
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≥—Ä—É–ø–ø –∑–∞ –º–µ—Å—è—Ü: {}", notCompleted);
        var notCompletedGroups = reportRepository.findThreeTimesNotCompletedGroupsByMonth()
                .stream()
                .map(NotCompletedGroup::of)
                .toList();
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—Ä–∏ —Ä–∞–∑–∞: {}", notCompletedGroups.size());
        var text = groupsReportText(openedGroups, completedGroupsByMonth, notCompleted, notCompletedGroups);
        notificationService.sendNotification(GROUPS_ADMIN_TELEGRAM_ID, text);
        notificationService.sendNotification(PASTOR_TELEGRAM_ID, text);
        log.info("–†–∞—Å—Å—ã–ª–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    @Scheduled(cron = "0 0 18 * * TUE", zone = "Europe/Moscow")
    public void reportsCountForWeekNotifier() {
        log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞");
        var openedGroups = groupRepository.countAllByIsOpenIsTrueAndAge(HOME_GROUP_TYPE);
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø –∑–∞ –Ω–µ–¥–µ–ª—é: {}", openedGroups);
        var completedGroupsByMonth = reportRepository.countAllCompletedGroupsByWeek();
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≥—Ä—É–ø–ø –∑–∞ –Ω–µ–¥–µ–ª—é: {}", completedGroupsByMonth);
        var notCompleted = reportRepository.countAllNotCompletedGroupsByWeek();
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≥—Ä—É–ø–ø –∑–∞ –Ω–µ–¥–µ–ª—é: {}", notCompleted);
        var text = groupsReportText(openedGroups, completedGroupsByMonth, notCompleted, Collections.emptyList());
        notificationService.sendNotification(GROUPS_ADMIN_TELEGRAM_ID, text);
        notificationService.sendNotification(PASTOR_TELEGRAM_ID, text);
        log.info("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    @Scheduled(cron = "0 0 22 * * *", zone = "Europe/Moscow")
    public void completingReportsNotifier() {
        log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤");
        var currentWeekDay = new GregorianCalendar(LOCALE).getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, LOCALE);
        var formattedDay = currentWeekDay.substring(0, 1).toUpperCase() + currentWeekDay.substring(1);
        log.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {}", formattedDay);
        var leaders = groupLeaderRepository.findAllByGroups_GroupsDays_Day_TitleAndRegionalLeader_IdNotAndGroups_Age(
                formattedDay, REGION_LEADER_ID_FOR_IGNORE_ADULT, HOME_GROUP_TYPE
        );
        for (var leaderEntity : leaders) {
            var now = LocalDate.now();
            var nowAsString = DATE_FORMATTER.format(now);
            var leaderName = leaderEntity.getUser().getLastName() + " " + leaderEntity.getUser().getFirstName();
            var telegramId = leaderEntity.getUser().getTelegramId();
            var groups = leaderEntity.getGroups();
            for (var group : groups) {
                var shortUrl = getShortUrl(leaderName, nowAsString, group.getId());
                var message = String.format(REPORT_MESSAGE, nowAsString, shortUrl);
                log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª–∏–¥–µ—Ä—É: {}", leaderName);
                notificationService.sendNotification(String.valueOf(telegramId), message);
                var unfilledReport = UnfilledReportEntity.builder()
                        .reportDate(now)
                        .leaderId(leaderEntity.getId())
                        .leaderName(leaderName)
                        .leaderTelegramId(String.valueOf(telegramId))
                        .group(group)
                        .build();
                unfilledReportRepository.save(unfilledReport);
            }
        }
        log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    @Scheduled(cron = "0 0 21 * * *", zone = "Europe/Moscow")
    public void unfilledReportsReportsNotifier() {
        log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤");
        var reports = unfilledReportRepository.findAll();
        log.info("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {}", reports.size());
        for (var report : reports) {
            var leaderName = report.getLeaderName();
            var reportDate = report.getReportDate();
            var formattedDate = DATE_FORMATTER.format(reportDate);
            log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª–∏–¥–µ—Ä—É: {} –∑–∞ –¥–∞—Ç—É: {}", leaderName, reportDate);
            var groupId = Optional.ofNullable(report.getGroup())
                    .map(GroupEntity::getId)
                    .orElse(1);
            var message = String.format(REPEATED_REPORT_MESSAGE, formattedDate, getShortUrl(leaderName, formattedDate, groupId));
            notificationService.sendNotification(report.getLeaderTelegramId(), message);
        }
        log.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    private void sendMessageAboutNotUnfilledReports(List<String> regionalLeaders) {
        for (var rl : regionalLeaders) {
            notificationService.sendNotification(rl,
                    """
                            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ
                            –í –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –æ—Ç—á–µ—Ç–∞–º üòá
                            –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ
                            """);
        }
        notificationService.sendNotification(
                GROUPS_ADMIN_TELEGRAM_ID,
                "–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –æ—Ç—á–µ—Ç–∞–º –æ –¥–æ–º–∞—à–Ω–∏—Ö –≥—Ä—É–ø–ø–∞—Ö"
        );
    }

    private Map<LeaderInfo, List<String>> createLeadersMapInfo() {
        return new HashMap<>() {
            @Override
            public String toString() {
                var sb = new StringBuilder();
                for (var entry : this.entrySet()) {
                    var value = String.join("\n", entry.getValue());
                    sb.append("–õ–∏–¥–µ—Ä: ")
                            .append("<b>")
                            .append(entry.getKey().name())
                            .append("</b>")
                            .append(": " + "\n")
                            .append(value)
                            .append("\n")
                            .append("\n");
                }
                return sb.toString();
            }
        };
    }

    private Map<LeaderInfo, List<String>> createLeadersInfoMap(List<UnfilledReportEntity> unfilledReportEntities) {
        var leadersMapInfo = createLeadersMapInfo();
        for (var unfilledReport : unfilledReportEntities) {
            var groupLeaderEntity = groupLeaderRepository.findById(unfilledReport.getLeaderId());
            var leaderName = groupLeaderEntity.map(GroupLeaderEntity::getUser)
                    .map(e -> e.getLastName() + " " + e.getFirstName());
            var regionalLeaderModel = groupLeaderEntity.map(GroupLeaderEntity::getRegionalLeader)
                    .map(RegionalLeaderEntity::getUser)
                    .map(LeaderInfo::of)
                    .orElse(LeaderInfo.empty(GROUPS_ADMIN_TELEGRAM_ID));
            leadersMapInfo.computeIfAbsent(regionalLeaderModel, k -> new ArrayList<>())
                    .add(String.format("%s –∑–∞ %s", leaderName, DATE_FORMATTER.format(unfilledReport.getReportDate())));
        }
        return leadersMapInfo;
    }

    private String createReportText(int size, Map<LeaderInfo, List<String>> leadersMapInfo) {
        return String.format("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: %s \n", size) + "\n" + leadersMapInfo;
    }

    private String groupsReportText(Integer openedGroups,
                                    Integer completedGroupsByMonth,
                                    Integer notCompleted,
                                    List<NotCompletedGroup> notCompletedGroups) {
        var title = String.format("–û—Ç—á–µ—Ç –ø–æ –¥–æ–º–∞—à–Ω–∏–º –≥—Ä—É–ø–ø–∞–º –∑–∞ %s\n\n", getMonthName(LocalDate.now().getMonthValue() - 1, notCompletedGroups));
        return title +
               String.format("–û—Ç–∫—Ä—ã—Ç–æ –≥—Ä—É–ø–ø: %s\n", openedGroups) +
               String.format("–ü—Ä–æ—à–ª–æ –≥—Ä—É–ø–ø: %s\n", completedGroupsByMonth) +
               String.format("–ù–µ –ø—Ä–æ—à–ª–æ –≥—Ä—É–ø–ø: %s\n\n", notCompleted) +
               notCompletedGroupsReportText(notCompletedGroups);
    }

    private String getMonthName(int number, List<NotCompletedGroup> notCompletedGroups) {
        if (notCompletedGroups.isEmpty()) {
            return "–ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é";
        }
        return switch (number) {
            case 1 -> "–Ø–Ω–≤–∞—Ä—å";
            case 2 -> "–§–µ–≤—Ä–∞–ª—å";
            case 3 -> "–ú–∞—Ä—Ç";
            case 4 -> "–ê–ø—Ä–µ–ª—å";
            case 5 -> "–ú–∞–π";
            case 6 -> "–ò—é–Ω—å";
            case 7 -> "–ò—é–ª—å";
            case 8 -> "–ê–≤–≥—É—Å—Ç";
            case 9 -> "–°–µ–Ω—Ç—è–±—Ä—å";
            case 10 -> "–û–∫—Ç—è–±—Ä—å";
            case 11 -> "–ù–æ—è–±—Ä—å";
            case 12 -> "–î–µ–∫–∞–±—Ä—å";
            default -> throw new IllegalStateException("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–Ω–∏—è –º–µ—è—Å—Ü–∞: " + number);
        };
    }

    private StringBuilder notCompletedGroupsReportText(List<NotCompletedGroup> notCompletedGroups) {
        if (notCompletedGroups.isEmpty()) {
            return new StringBuilder();
        }
        var sb = new StringBuilder();
        for (var notCompletedGroup : notCompletedGroups) {
            sb.append(String.format("%s, –Ω–µ –ø—Ä–æ—à–ª–∞: %s —Ä–∞–∑(–∞)\n", notCompletedGroup.name(), notCompletedGroup.count()));
        }
        return sb;
    }

    private String getShortUrl(String leaderName, String date, Integer groupId) {
        var formUrl = YANDEX_FORM_URL + String.format("?name=%s&date=%s&groupId=%s", leaderName.replaceAll(" ", "%20"), date, groupId);
        return urlShorterClient.urlShorter(formUrl);
    }

}
